Тестовое задание по Python

Реализовать RestAPI сервис (Flask), который позволял бы поддерживать (создавать, удалять и т.д.) задачи и проекты,
а также сотрудников, назначенных на задачи.

"Задача" — это сущность который содержит как минимум следующие поля:
идентификатор, название задачи, описание задачи, статус выполнения (В работе, Завершена),
сотрудник, выполняющий данную задачу (может быть пустым).

Система должна быть подготовлена к тому чтобы легко добавлять новые поля в сущность задачи.
Каждая задача должна принадлежать одному проекту.

Проект — это сущность которая, помимо задач, содержит название, идентификатор и код.

Сотрудник - сущность, которая содержит поля: идентификатор, имя, пол, дата рождения, дата выхода на работу.
Также у сотрудника есть список задач, на которые он назначен или был когда-то назначен.

В сервисе должны быть следующие endpoint'ы:

Проекты - /projects (CRUD)
Задачи - /tasks (CRUD) - учитывать, что при создании нужно указывать проект, к которому данная задача относится
Сотрудники - /employees (CRUD)

GET - Задачи проекта - /projects/{ID проекта}/tasks
GET - Задачи проекта в работе - /projects/{ID проекта}/tasks/open
GET - Завершенные задачи проекта - /projects/{ID проекта}/tasks/done
GET - Задачи сотрудника - /employees/{ID сотрудника}/tasks
GET - Задачи сотрудника по определенному проекту - /employees/{ID сотрудника}/{ID проекта}/tasks
GET - Задачи сотрудника в работе - /employees/{ID сотрудника}/tasks/open
GET - Завершенные задачи сотрудника - /employees/{ID сотрудника}/tasks/done
POST - Назначить задачу сотруднику - /employees/{ID сотрудника}/tasks
PATCH - Пометить задачу как завершенную - /tasks/{ID задачи}

Написать юнит-тесты.

Код следует подготовить к запуску и тестированию с минимальным количеством действий (имеется ввиду минимальное количество действий со стороны проверяющего).

Подход к работе:
1. Сначала необходимо разбить задачу на составляющие, желательно в пределах часа работы и оценить каждую составляющую.
2. Потом необходимо разработать сервис по полученному плану, фиксируя потраченное время по задачам.

Ключевые параметры оценки:
1. Простота для понимание работы с Rest Api.
2. Соответствие плана к реально выполненным задачам и потраченного времени к оценке.